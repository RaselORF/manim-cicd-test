[{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"checkpoint_paste","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/scene/scene.py","fixerCategoryTag":"PySEH-3","className":"Scene","priority":"M","scanDate":"Mon Jun 10 19:33:51 UTC 2024","fixerCustomMessageText":"In file: scene.py, method: checkpoint_paste, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\n                \"Scene.checkpoint_paste cannot be called outside of \" +\n                \"an ipython shell\"\n            )","fixNo":"EH-M-1","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>scene.py<\/span>, method: <span class='function_name'>checkpoint_paste<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["scene.py9936714160741034022.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"add_audio_segment","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/scene/scene_file_writer.py","fixerCategoryTag":"PySEH-3","className":"SceneFileWriter","priority":"M","scanDate":"Mon Jun 10 19:33:54 UTC 2024","fixerCustomMessageText":"In file: scene_file_writer.py, method: add_audio_segment, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"Adding sound at timestamp < 0\")","fixNo":"EH-M-2","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>scene_file_writer.py<\/span>, method: <span class='function_name'>add_audio_segment<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["scene_file_writer.py833442807506990464.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"color_to_rgb","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/utils/color.py","fixerCategoryTag":"PySEH-3","className":null,"priority":"M","scanDate":"Mon Jun 10 19:33:54 UTC 2024","fixerCustomMessageText":"In file: color.py, method: color_to_rgb, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"Invalid color type\")","fixNo":"EH-M-3","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>color.py<\/span>, method: <span class='function_name'>color_to_rgb<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["color.py14394383769800267716.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"bezier","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/utils/bezier.py","fixerCategoryTag":"PySEH-3","className":null,"priority":"M","scanDate":"Mon Jun 10 19:33:55 UTC 2024","fixerCustomMessageText":"In file: bezier.py, method: bezier, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"bezier cannot be calld on an empty list\")","fixNo":"EH-M-4","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>bezier.py<\/span>, method: <span class='function_name'>bezier<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["bezier.py15228724155395118724.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"line_intersection","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/utils/space_ops.py","fixerCategoryTag":"PySEH-3","className":null,"priority":"M","scanDate":"Mon Jun 10 19:33:56 UTC 2024","fixerCustomMessageText":"In file: space_ops.py, method: line_intersection, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"Lines do not intersect\")","fixNo":"EH-M-5","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>space_ops.py<\/span>, method: <span class='function_name'>line_intersection<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["space_ops.py1740453686807638420.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"__init__","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/svg/drawings.py","fixerCategoryTag":"PySEH-3","className":"DieFace","priority":"M","scanDate":"Mon Jun 10 19:33:58 UTC 2024","fixerCustomMessageText":"In file: drawings.py, method: __init__, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"DieFace only accepts integer inputs between 1 and 6\")","fixNo":"EH-M-6","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>drawings.py<\/span>, method: <span class='function_name'>__init__<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["drawings.py3063457124143159230.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"get_file_path","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/svg/svg_mobject.py","fixerCategoryTag":"PySEH-3","className":"SVGMobject","priority":"M","scanDate":"Mon Jun 10 19:33:59 UTC 2024","fixerCustomMessageText":"In file: svg_mobject.py, method: get_file_path, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"Must specify file for SVGMobject\")","fixNo":"EH-M-7","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>svg_mobject.py<\/span>, method: <span class='function_name'>get_file_path<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["svg_mobject.py4074146330230883394.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"__init__","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/types/surface.py","fixerCategoryTag":"PySEH-3","className":"TexturedSurface","priority":"M","scanDate":"Mon Jun 10 19:34:01 UTC 2024","fixerCustomMessageText":"In file: surface.py, method: __init__, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"uv_surface must be of type Surface\")","fixNo":"EH-M-8","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>surface.py<\/span>, method: <span class='function_name'>__init__<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["surface.py1593801412934314961.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"point_to_rgb","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/types/image_mobject.py","fixerCategoryTag":"PySEH-3","className":"ImageMobject","priority":"M","scanDate":"Mon Jun 10 19:34:01 UTC 2024","fixerCustomMessageText":"In file: image_mobject.py, method: point_to_rgb, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"Cannot sample color from outside an image\")","fixNo":"EH-M-9","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>image_mobject.py<\/span>, method: <span class='function_name'>point_to_rgb<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["image_mobject.py4009812313434769128.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"add","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/types/vectorized_mobject.py","fixerCategoryTag":"PySEH-3","className":"VMobject","priority":"M","scanDate":"Mon Jun 10 19:34:03 UTC 2024","fixerCustomMessageText":"In file: vectorized_mobject.py, method: add, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"All submobjects must be of type VMobject\")","fixNo":"EH-M-10","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>vectorized_mobject.py<\/span>, method: <span class='function_name'>add<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["vectorized_mobject.py1018972980564169362.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"__init__","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/types/point_cloud_mobject.py","fixerCategoryTag":"PySEH-3","className":"PGroup","priority":"M","scanDate":"Mon Jun 10 19:34:03 UTC 2024","fixerCustomMessageText":"In file: point_cloud_mobject.py, method: __init__, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"All submobjects must be of type PMobject\")","fixNo":"EH-M-11","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>point_cloud_mobject.py<\/span>, method: <span class='function_name'>__init__<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["point_cloud_mobject.py4956793016616467361.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"set_submobject_colors_by_gradient","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/mobject.py","fixerCategoryTag":"PySEH-3","className":"Mobject","priority":"M","scanDate":"Mon Jun 10 19:34:08 UTC 2024","fixerCustomMessageText":"In file: mobject.py, method: set_submobject_colors_by_gradient, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"Need at least one color\")","fixNo":"EH-M-12","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>mobject.py<\/span>, method: <span class='function_name'>set_submobject_colors_by_gradient<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["mobject.py1003739758986713627.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"put_start_and_end_on","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/mobject.py","fixerCategoryTag":"PySEH-3","className":"Mobject","priority":"M","scanDate":"Mon Jun 10 19:34:08 UTC 2024","fixerCustomMessageText":"In file: mobject.py, method: put_start_and_end_on, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"Cannot position endpoints of closed loop\")","fixNo":"EH-M-13","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>mobject.py<\/span>, method: <span class='function_name'>put_start_and_end_on<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["mobject.py3691688056928044500.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"restore","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/mobject.py","fixerCategoryTag":"PySEH-3","className":"Mobject","priority":"M","scanDate":"Mon Jun 10 19:34:08 UTC 2024","fixerCustomMessageText":"In file: mobject.py, method: restore, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"Trying to restore without having saved\")","fixNo":"EH-M-14","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>mobject.py<\/span>, method: <span class='function_name'>restore<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["mobject.py3671506263864292375.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"throw_error_if_no_points","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/mobject.py","fixerCategoryTag":"PySEH-3","className":"Mobject","priority":"M","scanDate":"Mon Jun 10 19:34:08 UTC 2024","fixerCustomMessageText":"In file: mobject.py, method: throw_error_if_no_points, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(message.format(caller_name))","fixNo":"EH-M-15","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>mobject.py<\/span>, method: <span class='function_name'>throw_error_if_no_points<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["mobject.py3160894046019957893.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"__init__","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/mobject.py","fixerCategoryTag":"PySEH-3","className":"Group","priority":"M","scanDate":"Mon Jun 10 19:34:08 UTC 2024","fixerCustomMessageText":"In file: mobject.py, method: __init__, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"All submobjects must be of type Mobject\")","fixNo":"EH-M-16","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>mobject.py<\/span>, method: <span class='function_name'>__init__<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["mobject.py11670627927355849071.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"add","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/mobject.py","fixerCategoryTag":"PySEH-3","className":"Mobject","priority":"M","scanDate":"Mon Jun 10 19:34:08 UTC 2024","fixerCustomMessageText":"In file: mobject.py, method: add, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"Mobject cannot contain self\")","fixNo":"EH-M-17","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>mobject.py<\/span>, method: <span class='function_name'>add<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["mobject.py6238965909062148114.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"get_tip","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/geometry.py","fixerCategoryTag":"PySEH-3","className":"TipableVMobject","priority":"M","scanDate":"Mon Jun 10 19:34:10 UTC 2024","fixerCustomMessageText":"In file: geometry.py, method: get_tip, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"tip not found\")","fixNo":"EH-M-18","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>geometry.py<\/span>, method: <span class='function_name'>get_tip<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["geometry.py540371330049161689.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"_convert_skia_path_to_vmobject","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/boolean_ops.py","fixerCategoryTag":"PySEH-3","className":null,"priority":"M","scanDate":"Mon Jun 10 19:34:10 UTC 2024","fixerCustomMessageText":"In file: boolean_ops.py, method: _convert_skia_path_to_vmobject, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(f\"Unsupported: {path_verb}\")","fixNo":"EH-M-19","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>boolean_ops.py<\/span>, method: <span class='function_name'>_convert_skia_path_to_vmobject<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["boolean_ops.py1108093005278809029.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"get_all_ranges","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/coordinate_systems.py","fixerCategoryTag":"PySEH-3","className":"CoordinateSystem","priority":"M","scanDate":"Mon Jun 10 19:34:14 UTC 2024","fixerCustomMessageText":"In file: coordinate_systems.py, method: get_all_ranges, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"Not implemented\")","fixNo":"EH-M-20","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>coordinate_systems.py<\/span>, method: <span class='function_name'>get_all_ranges<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["coordinate_systems.py17820168803166266054.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"point_to_coords","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/coordinate_systems.py","fixerCategoryTag":"PySEH-3","className":"CoordinateSystem","priority":"M","scanDate":"Mon Jun 10 19:34:14 UTC 2024","fixerCustomMessageText":"In file: coordinate_systems.py, method: point_to_coords, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"Not implemented\")","fixNo":"EH-M-21","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>coordinate_systems.py<\/span>, method: <span class='function_name'>point_to_coords<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["coordinate_systems.py6076402257425573776.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"get_axes","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/coordinate_systems.py","fixerCategoryTag":"PySEH-3","className":"CoordinateSystem","priority":"M","scanDate":"Mon Jun 10 19:34:14 UTC 2024","fixerCustomMessageText":"In file: coordinate_systems.py, method: get_axes, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"Not implemented\")","fixNo":"EH-M-22","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>coordinate_systems.py<\/span>, method: <span class='function_name'>get_axes<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["coordinate_systems.py3763188851531912901.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"get_riemann_rectangles","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/coordinate_systems.py","fixerCategoryTag":"PySEH-3","className":"CoordinateSystem","priority":"M","scanDate":"Mon Jun 10 19:34:14 UTC 2024","fixerCustomMessageText":"In file: coordinate_systems.py, method: get_riemann_rectangles, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"Invalid input sample type\")","fixNo":"EH-M-23","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>coordinate_systems.py<\/span>, method: <span class='function_name'>get_riemann_rectangles<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["coordinate_systems.py2534947743812364484.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"coords_to_point","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/coordinate_systems.py","fixerCategoryTag":"PySEH-3","className":"CoordinateSystem","priority":"M","scanDate":"Mon Jun 10 19:34:14 UTC 2024","fixerCustomMessageText":"In file: coordinate_systems.py, method: coords_to_point, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"Not implemented\")","fixNo":"EH-M-24","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>coordinate_systems.py<\/span>, method: <span class='function_name'>coords_to_point<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["coordinate_systems.py2773558578187544999.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"get_bounds","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/animation/creation.py","fixerCategoryTag":"PySEH-3","className":"ShowPartial","priority":"M","scanDate":"Mon Jun 10 19:34:14 UTC 2024","fixerCustomMessageText":"In file: creation.py, method: get_bounds, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"Not Implemented\")","fixNo":"EH-M-25","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>creation.py<\/span>, method: <span class='function_name'>get_bounds<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["creation.py12938074335056637214.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"create_target","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/animation/transform.py","fixerCategoryTag":"PySEH-3","className":"ApplyFunction","priority":"M","scanDate":"Mon Jun 10 19:34:15 UTC 2024","fixerCustomMessageText":"In file: transform.py, method: create_target, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"Functions passed to ApplyFunction must return object of type Mobject\")","fixNo":"EH-M-26","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>transform.py<\/span>, method: <span class='function_name'>create_target<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["transform.py3683426818171770921.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"check_validity_of_input","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/animation/transform.py","fixerCategoryTag":"PySEH-3","className":"MoveToTarget","priority":"M","scanDate":"Mon Jun 10 19:34:15 UTC 2024","fixerCustomMessageText":"In file: transform.py, method: check_validity_of_input, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\n                \"MoveToTarget called on mobject without attribute 'target'\"\n            )","fixNo":"EH-M-27","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>transform.py<\/span>, method: <span class='function_name'>check_validity_of_input<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["transform.py15404570465406887422.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"__init__","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/animation/transform.py","fixerCategoryTag":"PySEH-3","className":"Restore","priority":"M","scanDate":"Mon Jun 10 19:34:15 UTC 2024","fixerCustomMessageText":"In file: transform.py, method: __init__, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"Trying to restore without having saved\")","fixNo":"EH-M-28","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>transform.py<\/span>, method: <span class='function_name'>__init__<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["transform.py16226932510163344913.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"initialize_matrix","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/animation/transform.py","fixerCategoryTag":"PySEH-3","className":"ApplyMatrix","priority":"M","scanDate":"Mon Jun 10 19:34:15 UTC 2024","fixerCustomMessageText":"In file: transform.py, method: initialize_matrix, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\"Matrix has bad dimensions\")","fixNo":"EH-M-29","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>transform.py<\/span>, method: <span class='function_name'>initialize_matrix<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["transform.py9554665894947228188.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"check_validity_of_input","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/animation/transform.py","fixerCategoryTag":"PySEH-3","className":"ApplyMethod","priority":"M","scanDate":"Mon Jun 10 19:34:15 UTC 2024","fixerCustomMessageText":"In file: transform.py, method: check_validity_of_input, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\n                \"Whoops, looks like you accidentally invoked \"\n                \"the method you want to animate\"\n            )","fixNo":"EH-M-30","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>transform.py<\/span>, method: <span class='function_name'>check_validity_of_input<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["transform.py8657345292967150301.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"check_target_mobject_validity","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/animation/transform.py","fixerCategoryTag":"PySEH-3","className":"Transform","priority":"M","scanDate":"Mon Jun 10 19:34:15 UTC 2024","fixerCustomMessageText":"In file: transform.py, method: check_target_mobject_validity, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"raise Exception(\n                f\"{self.__class__.__name__}.create_target not properly implemented\"\n            )","fixNo":"EH-M-31","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>transform.py<\/span>, method: <span class='function_name'>check_target_mobject_validity<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["transform.py5611125055589451882.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"__eq__","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/event_handler/event_listner.py","fixerCategoryTag":"PySEH-3","className":"EventListener","priority":"M","scanDate":"Mon Jun 10 19:34:16 UTC 2024","fixerCustomMessageText":"In file: event_listner.py, method: __eq__, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"except:\n            pass","fixNo":"EH-M-32","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>event_listner.py<\/span>, method: <span class='function_name'>__eq__<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["event_listner.py11066959710125757211.diff"]},{"fixerCustomHeading":"Raise Custom Exceptions","isWarning":"True","functionName":"remove_listner","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/event_handler/event_dispatcher.py","fixerCategoryTag":"PySEH-3","className":"EventDispatcher","priority":"M","scanDate":"Mon Jun 10 19:34:17 UTC 2024","fixerCustomMessageText":"In file: event_dispatcher.py, method: remove_listner, an {Exception} or a {BaseException} was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for raising exception.","fixerCategory":"Error Handling","selectedNode":"except:\n            # raise ValueError(\"Handler is not handling this event, so cannot remove it.\")\n            pass","fixNo":"EH-M-33","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>event_dispatcher.py<\/span>, method: <span class='function_name'>remove_listner<\/span>, an <span class='key-word'>Exception<\/span> or a <span class='key-word'>BaseException<\/span> was raised. This creates confusion since the exceptions are then differentiated only by the messages they carry. iCR suggested that a specific built-in exception or a custom exception is raised. For more information, read the Python guideline for <a href='https://www.python.org/dev/peps/pep-0352/' target='_blank'>raising exception<\/a>.","diffLocations":["event_dispatcher.py17621692721425558274.diff"]},{"fixerCustomHeading":"Avoid Wildcard Imports","isWarning":"True","functionName":null,"projectPath":"/workspace/source","filePath":"/workspace/source/logo/logo.py","fixerCategoryTag":"PyCSI-1","className":null,"priority":"M","scanDate":"Mon Jun 10 19:33:48 UTC 2024","fixerCustomMessageText":"In file: logo.py, a module is imported using the wildcard symbol. This will import public name from this module and can create conflicts in the local namespace. iCR suggested that wildcard imports should be avoided.","fixerCategory":"Inappropriate Logic","selectedNode":"# OpenRefactory Warning: Importing every public name using star import should be avoided.\n    from manimlib.imports import *\n\nNEW_BLUE = \"#68a8e1\"\n\nclass Thumbnail(GraphScene):\n    CONFIG = {\n        \"y_max\": 8,\n        \"y_axis_height\": 5,\n    }\n\n    def construct(self):\n        self.show_function_graph()\n\n    def show_function_graph(self):\n        self.setup_axes(animate=False)\n        def func(x):\n            return 0.1 * (x + 3-5) * (x - 3-5) * (x-5) + 5\n\n        def rect(x):\n            return 2.775*(x-1.5)+3.862\n        recta = self.get_graph(rect,x_min=-1,x_max=5)\n        graph = self.get_graph(func,x_min=0.2,x_max=9)\n        graph.set_color(NEW_BLUE)\n        input_tracker_p1 = ValueTracker(1.5)\n        input_tracker_p2 = ValueTracker(3.5)\n\n        def get_x_value(input_tracker):\n            return input_tracker.get_value()\n\n        def get_y_value(input_tracker):\n            return graph.underlying_function(get_x_value(input_tracker))\n\n        def get_x_point(input_tracker):\n            return self.coords_to_point(get_x_value(input_tracker), 0)\n\n        def get_y_point(input_tracker):\n            return self.coords_to_point(0, get_y_value(input_tracker))\n\n        def get_graph_point(input_tracker):\n            return self.coords_to_point(get_x_value(input_tracker), get_y_value(input_tracker))\n\n        def get_v_line(input_tracker):\n            return DashedLine(get_x_point(input_tracker), get_graph_point(input_tracker), stroke_width=2)\n\n        def get_h_line(input_tracker):\n            return DashedLine(get_graph_point(input_tracker), get_y_point(input_tracker), stroke_width=2)\n        # \n        input_triangle_p1 = RegularPolygon(n=3, start_angle=TAU / 4)\n        output_triangle_p1 = RegularPolygon(n=3, start_angle=0)\n        for triangle in input_triangle_p1, output_triangle_p1:\n            triangle.set_fill(WHITE, 1)\n            triangle.set_stroke(width=0)\n            triangle.scale(0.1)\n        # \n        input_triangle_p2 = RegularPolygon(n=3, start_angle=TAU / 4)\n        output_triangle_p2 = RegularPolygon(n=3, start_angle=0)\n        for triangle in input_triangle_p2, output_triangle_p2:\n            triangle.set_fill(WHITE, 1)\n            triangle.set_stroke(width=0)\n            triangle.scale(0.1)\n        \n        # \n        x_label_p1 = Tex(\"a\")\n        output_label_p1 = Tex(\"f(a)\")\n        x_label_p2 = Tex(\"b\")\n        output_label_p2 = Tex(\"f(b)\")\n        v_line_p1 = get_v_line(input_tracker_p1)\n        v_line_p2 = get_v_line(input_tracker_p2)\n        h_line_p1 = get_h_line(input_tracker_p1)\n        h_line_p2 = get_h_line(input_tracker_p2)\n        graph_dot_p1 = Dot(color=WHITE)\n        graph_dot_p2 = Dot(color=WHITE)\n\n        # reposition mobjects\n        x_label_p1.next_to(v_line_p1, DOWN)\n        x_label_p2.next_to(v_line_p2, DOWN)\n        output_label_p1.next_to(h_line_p1, LEFT)\n        output_label_p2.next_to(h_line_p2, LEFT)\n        input_triangle_p1.next_to(v_line_p1, DOWN, buff=0)\n        input_triangle_p2.next_to(v_line_p2, DOWN, buff=0)\n        output_triangle_p1.next_to(h_line_p1, LEFT, buff=0)\n        output_triangle_p2.next_to(h_line_p2, LEFT, buff=0)\n        graph_dot_p1.move_to(get_graph_point(input_tracker_p1))\n        graph_dot_p2.move_to(get_graph_point(input_tracker_p2))\n\n\n        #\n        self.play(\n            ShowCreation(graph),\n        )\n        # Animacion del punto a\n        self.add_foreground_mobject(graph_dot_p1)\n        self.add_foreground_mobject(graph_dot_p2)\n        self.play(\n            DrawBorderThenFill(input_triangle_p1),\n            Write(x_label_p1),\n            ShowCreation(v_line_p1),\n            GrowFromCenter(graph_dot_p1),\n            ShowCreation(h_line_p1),\n            Write(output_label_p1),\n            DrawBorderThenFill(output_triangle_p1),\n            DrawBorderThenFill(input_triangle_p2),\n            Write(x_label_p2),\n            ShowCreation(v_line_p2),\n            GrowFromCenter(graph_dot_p2),\n            ShowCreation(h_line_p2),\n            Write(output_label_p2),\n            DrawBorderThenFill(output_triangle_p2),\n            run_time=0.5\n        )\n        self.add(\n            input_triangle_p2,\n            x_label_p2,\n            graph_dot_p2,\n            v_line_p2,\n            h_line_p2,\n            output_triangle_p2,\n            output_label_p2,\n        )\n        ###################\n        pendiente_recta = self.get_secant_slope_group(\n            1.9, recta, dx = 1.4,\n            df_label = None,\n            dx_label = None,\n            dx_line_color = PURPLE,\n            df_line_color= ORANGE,\n            )\n        grupo_secante = self.get_secant_slope_group(\n            1.5, graph, dx = 2,\n            df_label = None,\n            dx_label = None,\n            dx_line_color = \"#942357\",\n            df_line_color= \"#3f7d5c\",\n            secant_line_color = RED,\n        )\n\n\n        self.add(\n            input_triangle_p2,\n            graph_dot_p2,\n            v_line_p2,\n            h_line_p2,\n            output_triangle_p2,\n        )\n        self.play(FadeIn(grupo_secante))\n\n        kwargs = {\n            \"x_min\" : 4,\n            \"x_max\" : 9,\n            \"fill_opacity\" : 0.75,\n            \"stroke_width\" : 0.25,\n        }\n        self.graph=graph\n        iteraciones=6\n\n\n        self.rect_list = self.get_riemann_rectangles_list(\n            graph, iteraciones,start_color=PURPLE,end_color=ORANGE, **kwargs\n        )\n        flat_rects = self.get_riemann_rectangles(\n            self.get_graph(lambda x : 0), dx = 0.5,start_color=invert_color(PURPLE),end_color=invert_color(ORANGE),**kwargs\n        )\n        rects = self.rect_list[0]\n        self.transform_between_riemann_rects(\n            flat_rects, rects, \n            replace_mobject_with_target_in_scene = True,\n            run_time=0.9\n        )\n\n        # adding manim\n        picture = Group(*self.mobjects)\n        picture.scale(0.6).to_edge(LEFT, buff=SMALL_BUFF)\n        manim = TexText(\"Manim\").set_height(1.5) \\\n                                    .next_to(picture, RIGHT) \\\n                                    .shift(DOWN * 0.7)\n        self.add(manim)\n","fixNo":"IL-M-1","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>logo.py<\/span>, a module is imported using the wildcard symbol. This will import <a href='https://docs.python.org/3.8/reference/simple_stmts.html#import' target='_blank'>public name from this module<\/a> and can create conflicts in the local namespace. iCR suggested that wildcard imports should be avoided.","diffLocations":["logo.py7730745335130208592.diff"]},{"fixerCustomHeading":"Avoid Wildcard Imports","isWarning":"True","functionName":null,"projectPath":"/workspace/source","filePath":"/workspace/source/example_scenes.py","fixerCategoryTag":"PyCSI-1","className":null,"priority":"M","scanDate":"Mon Jun 10 19:34:18 UTC 2024","fixerCustomMessageText":"In file: example_scenes.py, a module is imported using the wildcard symbol. This will import public name from this module and can create conflicts in the local namespace. iCR suggested that wildcard imports should be avoided.","fixerCategory":"Inappropriate Logic","selectedNode":"# OpenRefactory Warning: Importing every public name using star import should be avoided.\n    from manimlib import *\nimport numpy as np\n\n# To watch one of these scenes, run the following:\n# manimgl example_scenes.py OpeningManimExample\n# Use -s to skip to the end and just save the final frame\n# Use -w to write the animation to a file\n# Use -o to write it to a file and open it once done\n# Use -n <number> to skip ahead to the n'th animation of a scene.\n\n\nclass OpeningManimExample(Scene):\n    def construct(self):\n        intro_words = Text(\"\"\"\n            The original motivation for manim was to\n            better illustrate mathematical functions\n            as transformations.\n        \"\"\")\n        intro_words.to_edge(UP)\n\n        self.play(Write(intro_words))\n        self.wait(2)\n\n        # Linear transform\n        grid = NumberPlane((-10, 10), (-5, 5))\n        matrix = [[1, 1], [0, 1]]\n        linear_transform_words = VGroup(\n            Text(\"This is what the matrix\"),\n            IntegerMatrix(matrix, include_background_rectangle=True),\n            Text(\"looks like\")\n        )\n        linear_transform_words.arrange(RIGHT)\n        linear_transform_words.to_edge(UP)\n        linear_transform_words.set_backstroke(width=5)\n\n        self.play(\n            ShowCreation(grid),\n            FadeTransform(intro_words, linear_transform_words)\n        )\n        self.wait()\n        self.play(grid.animate.apply_matrix(matrix), run_time=3)\n        self.wait()\n\n        # Complex map\n        c_grid = ComplexPlane()\n        moving_c_grid = c_grid.copy()\n        moving_c_grid.prepare_for_nonlinear_transform()\n        c_grid.set_stroke(BLUE_E, 1)\n        c_grid.add_coordinate_labels(font_size=24)\n        complex_map_words = TexText(\"\"\"\n            Or thinking of the plane as $\\\\mathds{C}$,\\\\\\\\\n            this is the map $z \\\\rightarrow z^2$\n        \"\"\")\n        complex_map_words.to_corner(UR)\n        complex_map_words.set_backstroke(width=5)\n\n        self.play(\n            FadeOut(grid),\n            Write(c_grid, run_time=3),\n            FadeIn(moving_c_grid),\n            FadeTransform(linear_transform_words, complex_map_words),\n        )\n        self.wait()\n        self.play(\n            moving_c_grid.animate.apply_complex_function(lambda z: z**2),\n            run_time=6,\n        )\n        self.wait(2)\n\n\nclass AnimatingMethods(Scene):\n    def construct(self):\n        grid = Tex(R\"\\pi\").get_grid(10, 10, height=4)\n        self.add(grid)\n\n        # You can animate the application of mobject methods with the\n        # \".animate\" syntax:\n        self.play(grid.animate.shift(LEFT))\n\n        # Both of those will interpolate between the mobject's initial\n        # state and whatever happens when you apply that method.\n        # For this example, calling grid.shift(LEFT) would shift the\n        # grid one unit to the left, but both of the previous calls to\n        # \"self.play\" animate that motion.\n\n        # The same applies for any method, including those setting colors.\n        self.play(grid.animate.set_color(YELLOW))\n        self.wait()\n        self.play(grid.animate.set_submobject_colors_by_gradient(BLUE, GREEN))\n        self.wait()\n        self.play(grid.animate.set_height(TAU - MED_SMALL_BUFF))\n        self.wait()\n\n        # The method Mobject.apply_complex_function lets you apply arbitrary\n        # complex functions, treating the points defining the mobject as\n        # complex numbers.\n        self.play(grid.animate.apply_complex_function(np.exp), run_time=5)\n        self.wait()\n\n        # Even more generally, you could apply Mobject.apply_function,\n        # which takes in functions form R^3 to R^3\n        self.play(\n            grid.animate.apply_function(\n                lambda p: [\n                    p[0] + 0.5 * math.sin(p[1]),\n                    p[1] + 0.5 * math.sin(p[0]),\n                    p[2]\n                ]\n            ),\n            run_time=5,\n        )\n        self.wait()\n\n\nclass TextExample(Scene):\n    def construct(self):\n        # To run this scene properly, you should have \"Consolas\" font in your computer\n        # for full usage, you can see https://github.com/3b1b/manim/pull/680\n        text = Text(\"Here is a text\", font=\"Consolas\", font_size=90)\n        difference = Text(\n            \"\"\"\n            The most important difference between Text and TexText is that\\n\n            you can change the font more easily, but can't use the LaTeX grammar\n            \"\"\",\n            font=\"Arial\", font_size=24,\n            # t2c is a dict that you can choose color for different text\n            t2c={\"Text\": BLUE, \"TexText\": BLUE, \"LaTeX\": ORANGE}\n        )\n        VGroup(text, difference).arrange(DOWN, buff=1)\n        self.play(Write(text))\n        self.play(FadeIn(difference, UP))\n        self.wait(3)\n\n        fonts = Text(\n            \"And you can also set the font according to different words\",\n            font=\"Arial\",\n            t2f={\"font\": \"Consolas\", \"words\": \"Consolas\"},\n            t2c={\"font\": BLUE, \"words\": GREEN}\n        )\n        fonts.set_width(FRAME_WIDTH - 1)\n        slant = Text(\n            \"And the same as slant and weight\",\n            font=\"Consolas\",\n            t2s={\"slant\": ITALIC},\n            t2w={\"weight\": BOLD},\n            t2c={\"slant\": ORANGE, \"weight\": RED}\n        )\n        VGroup(fonts, slant).arrange(DOWN, buff=0.8)\n        self.play(FadeOut(text), FadeOut(difference, shift=DOWN))\n        self.play(Write(fonts))\n        self.wait()\n        self.play(Write(slant))\n        self.wait()\n\n\nclass TexTransformExample(Scene):\n    def construct(self):\n        # Tex to color map\n        t2c = {\n            \"A\": BLUE,\n            \"B\": TEAL,\n            \"C\": GREEN,\n        }\n        # Configuration to pass along to each Tex mobject\n        kw = dict(font_size=72, t2c=t2c)\n        lines = VGroup(\n            Tex(\"A^2 + B^2 = C^2\", **kw),\n            Tex(\"A^2 = C^2 - B^2\", **kw),\n            Tex(\"A^2 = (C + B)(C - B)\", **kw),\n            Tex(R\"A = \\sqrt{(C + B)(C - B)}\", **kw),\n        )\n        lines.arrange(DOWN, buff=LARGE_BUFF)\n\n        self.add(lines[0])\n        # The animation TransformMatchingStrings will line up parts\n        # of the source and target which have matching substring strings.\n        # Here, giving it a little path_arc makes each part rotate into\n        # their final positions, which feels appropriate for the idea of\n        # rearranging an equation\n        self.play(\n            TransformMatchingStrings(\n                lines[0].copy(), lines[1],\n                # matched_keys specifies which substring should\n                # line up. If it's not specified, the animation\n                # will align the longest matching substrings.\n                # In this case, the substring \"^2 = C^2\" would\n                # trip it up\n                matched_keys=[\"A^2\", \"B^2\", \"C^2\"],\n                # When you want a substring from the source\n                # to go to a non-equal substring from the target,\n                # use the key map.\n                key_map={\"+\": \"-\"},\n                path_arc=90 * DEGREES,\n            ),\n        )\n        self.wait()\n        self.play(TransformMatchingStrings(\n            lines[1].copy(), lines[2],\n            matched_keys=[\"A^2\"]\n        ))\n        self.wait()\n        self.play(\n            TransformMatchingStrings(\n                lines[2].copy(), lines[3],\n                key_map={\"2\": R\"\\sqrt\"},\n                path_arc=-30 * DEGREES,\n            ),\n        )\n        self.wait(2)\n        self.play(LaggedStartMap(FadeOut, lines, shift=2 * RIGHT))\n\n        # TransformMatchingShapes will try to line up all pieces of a\n        # source mobject with those of a target, regardless of the\n        # what Mobject type they are.\n        source = Text(\"the morse code\", height=1)\n        target = Text(\"here come dots\", height=1)\n        saved_source = source.copy()\n\n        self.play(Write(source))\n        self.wait()\n        kw = dict(run_time=3, path_arc=PI / 2)\n        self.play(TransformMatchingShapes(source, target, **kw))\n        self.wait()\n        self.play(TransformMatchingShapes(target, saved_source, **kw))\n        self.wait()\n\n\nclass TexIndexing(Scene):\n    def construct(self):\n        # You can index into Tex mobject (or other StringMobjects) by substrings\n        equation = Tex(R\"e^{\\pi i} = -1\", font_size=144)\n\n        self.add(equation)\n        self.play(FlashAround(equation[\"e\"]))\n        self.wait()\n        self.play(Indicate(equation[R\"\\pi\"]))\n        self.wait()\n        self.play(TransformFromCopy(\n            equation[R\"e^{\\pi i}\"].copy().set_opacity(0.5),\n            equation[\"-1\"],\n            path_arc=-PI / 2,\n            run_time=3\n        ))\n        self.play(FadeOut(equation))\n\n        # Or regular expressions\n        equation = Tex(\"A^2 + B^2 = C^2\", font_size=144)\n\n        self.play(Write(equation))\n        for part in equation[re.compile(r\"\\w\\^2\")]:\n            self.play(FlashAround(part))\n        self.wait()\n        self.play(FadeOut(equation))\n\n        # Indexing by substrings like this may not work when\n        # the order in which Latex draws symbols does not match\n        # the order in which they show up in the string.\n        # For example, here the infinity is drawn before the sigma\n        # so we don't get the desired behavior.\n        equation = Tex(R\"\\sum_{n = 1}^\\infty \\frac{1}{n^2} = \\frac{\\pi^2}{6}\", font_size=72)\n        self.play(FadeIn(equation))\n        self.play(equation[R\"\\infty\"].animate.set_color(RED))  # Doesn't hit the infinity\n        self.wait()\n        self.play(FadeOut(equation))\n\n        # However you can always fix this by explicitly passing in\n        # a string you might want to isolate later. Also, using\n        # \\over instead of \\frac helps to avoid the issue for fractions\n        equation = Tex(\n            R\"\\sum_{n = 1}^\\infty {1 \\over n^2} = {\\pi^2 \\over 6}\",\n            # Explicitly mark \"\\infty\" as a substring you might want to access\n            isolate=[R\"\\infty\"],\n            font_size=72\n        )\n        self.play(FadeIn(equation))\n        self.play(equation[R\"\\infty\"].animate.set_color(RED))  # Got it!\n        self.wait()\n        self.play(FadeOut(equation))\n\n\nclass UpdatersExample(Scene):\n    def construct(self):\n        square = Square()\n        square.set_fill(BLUE_E, 1)\n\n        # On all frames, the constructor Brace(square, UP) will\n        # be called, and the mobject brace will set its data to match\n        # that of the newly constructed object\n        brace = always_redraw(Brace, square, UP)\n\n        label = TexText(\"Width = 0.00\")\n        number = label.make_number_changable(\"0.00\")\n\n        # This ensures that the method deicmal.next_to(square)\n        # is called on every frame\n        always(label.next_to, brace, UP)\n        # You could also write the following equivalent line\n        # label.add_updater(lambda m: m.next_to(brace, UP))\n\n        # If the argument itself might change, you can use f_always,\n        # for which the arguments following the initial Mobject method\n        # should be functions returning arguments to that method.\n        # The following line ensures thst decimal.set_value(square.get_y())\n        # is called every frame\n        f_always(number.set_value, square.get_width)\n        # You could also write the following equivalent line\n        # number.add_updater(lambda m: m.set_value(square.get_width()))\n\n        self.add(square, brace, label)\n\n        # Notice that the brace and label track with the square\n        self.play(\n            square.animate.scale(2),\n            rate_func=there_and_back,\n            run_time=2,\n        )\n        self.wait()\n        self.play(\n            square.animate.set_width(5, stretch=True),\n            run_time=3,\n        )\n        self.wait()\n        self.play(\n            square.animate.set_width(2),\n            run_time=3\n        )\n        self.wait()\n\n        # In general, you can alway call Mobject.add_updater, and pass in\n        # a function that you want to be called on every frame.  The function\n        # should take in either one argument, the mobject, or two arguments,\n        # the mobject and the amount of time since the last frame.\n        now = self.time\n        w0 = square.get_width()\n        square.add_updater(\n            lambda m: m.set_width(w0 * math.sin(self.time - now) + w0)\n        )\n        self.wait(4 * PI)\n\n\nclass CoordinateSystemExample(Scene):\n    def construct(self):\n        axes = Axes(\n            # x-axis ranges from -1 to 10, with a default step size of 1\n            x_range=(-1, 10),\n            # y-axis ranges from -2 to 2 with a step size of 0.5\n            y_range=(-2, 2, 0.5),\n            # The axes will be stretched so as to match the specified\n            # height and width\n            height=6,\n            width=10,\n            # Axes is made of two NumberLine mobjects.  You can specify\n            # their configuration with axis_config\n            axis_config=dict(\n                stroke_color=GREY_A,\n                stroke_width=2,\n                numbers_to_exclude=[0],\n            ),\n            # Alternatively, you can specify configuration for just one\n            # of them, like this.\n            y_axis_config=dict(\n                numbers_with_elongated_ticks=[-2, 2],\n            )\n        )\n        # Keyword arguments of add_coordinate_labels can be used to\n        # configure the DecimalNumber mobjects which it creates and\n        # adds to the axes\n        axes.add_coordinate_labels(\n            font_size=20,\n            num_decimal_places=1,\n        )\n        self.add(axes)\n\n        # Axes descends from the CoordinateSystem class, meaning\n        # you can call call axes.coords_to_point, abbreviated to\n        # axes.c2p, to associate a set of coordinates with a point,\n        # like so:\n        dot = Dot(color=RED)\n        dot.move_to(axes.c2p(0, 0))\n        self.play(FadeIn(dot, scale=0.5))\n        self.play(dot.animate.move_to(axes.c2p(3, 2)))\n        self.wait()\n        self.play(dot.animate.move_to(axes.c2p(5, 0.5)))\n        self.wait()\n\n        # Similarly, you can call axes.point_to_coords, or axes.p2c\n        # print(axes.p2c(dot.get_center()))\n\n        # We can draw lines from the axes to better mark the coordinates\n        # of a given point.\n        # Here, the always_redraw command means that on each new frame\n        # the lines will be redrawn\n        h_line = always_redraw(lambda: axes.get_h_line(dot.get_left()))\n        v_line = always_redraw(lambda: axes.get_v_line(dot.get_bottom()))\n\n        self.play(\n            ShowCreation(h_line),\n            ShowCreation(v_line),\n        )\n        self.play(dot.animate.move_to(axes.c2p(3, -2)))\n        self.wait()\n        self.play(dot.animate.move_to(axes.c2p(1, 1)))\n        self.wait()\n\n        # If we tie the dot to a particular set of coordinates, notice\n        # that as we move the axes around it respects the coordinate\n        # system defined by them.\n        f_always(dot.move_to, lambda: axes.c2p(1, 1))\n        self.play(\n            axes.animate.scale(0.75).to_corner(UL),\n            run_time=2,\n        )\n        self.wait()\n        self.play(FadeOut(VGroup(axes, dot, h_line, v_line)))\n\n        # Other coordinate systems you can play around with include\n        # ThreeDAxes, NumberPlane, and ComplexPlane.\n\n\nclass GraphExample(Scene):\n    def construct(self):\n        axes = Axes((-3, 10), (-1, 8), height=6)\n        axes.add_coordinate_labels()\n\n        self.play(Write(axes, lag_ratio=0.01, run_time=1))\n\n        # Axes.get_graph will return the graph of a function\n        sin_graph = axes.get_graph(\n            lambda x: 2 * math.sin(x),\n            color=BLUE,\n        )\n        # By default, it draws it so as to somewhat smoothly interpolate\n        # between sampled points (x, f(x)).  If the graph is meant to have\n        # a corner, though, you can set use_smoothing to False\n        relu_graph = axes.get_graph(\n            lambda x: max(x, 0),\n            use_smoothing=False,\n            color=YELLOW,\n        )\n        # For discontinuous functions, you can specify the point of\n        # discontinuity so that it does not try to draw over the gap.\n        step_graph = axes.get_graph(\n            lambda x: 2.0 if x > 3 else 1.0,\n            discontinuities=[3],\n            color=GREEN,\n        )\n\n        # Axes.get_graph_label takes in either a string or a mobject.\n        # If it's a string, it treats it as a LaTeX expression.  By default\n        # it places the label next to the graph near the right side, and\n        # has it match the color of the graph\n        sin_label = axes.get_graph_label(sin_graph, \"\\\\sin(x)\")\n        relu_label = axes.get_graph_label(relu_graph, Text(\"ReLU\"))\n        step_label = axes.get_graph_label(step_graph, Text(\"Step\"), x=4)\n\n        self.play(\n            ShowCreation(sin_graph),\n            FadeIn(sin_label, RIGHT),\n        )\n        self.wait(2)\n        self.play(\n            ReplacementTransform(sin_graph, relu_graph),\n            FadeTransform(sin_label, relu_label),\n        )\n        self.wait()\n        self.play(\n            ReplacementTransform(relu_graph, step_graph),\n            FadeTransform(relu_label, step_label),\n        )\n        self.wait()\n\n        parabola = axes.get_graph(lambda x: 0.25 * x**2)\n        parabola.set_stroke(BLUE)\n        self.play(\n            FadeOut(step_graph),\n            FadeOut(step_label),\n            ShowCreation(parabola)\n        )\n        self.wait()\n\n        # You can use axes.input_to_graph_point, abbreviated\n        # to axes.i2gp, to find a particular point on a graph\n        dot = Dot(color=RED)\n        dot.move_to(axes.i2gp(2, parabola))\n        self.play(FadeIn(dot, scale=0.5))\n\n        # A value tracker lets us animate a parameter, usually\n        # with the intent of having other mobjects update based\n        # on the parameter\n        x_tracker = ValueTracker(2)\n        f_always(\n            dot.move_to,\n            lambda: axes.i2gp(x_tracker.get_value(), parabola)\n        )\n\n        self.play(x_tracker.animate.set_value(4), run_time=3)\n        self.play(x_tracker.animate.set_value(-2), run_time=3)\n        self.wait()\n\n\nclass TexAndNumbersExample(Scene):\n    def construct(self):\n        axes = Axes((-3, 3), (-3, 3), unit_size=1)\n        axes.to_edge(DOWN)\n        axes.add_coordinate_labels(font_size=16)\n        circle = Circle(radius=2)\n        circle.set_stroke(YELLOW, 3)\n        circle.move_to(axes.get_origin())\n        self.add(axes, circle)\n\n        # When numbers show up in tex, they can be readily\n        # replaced with DecimalMobjects so that methods like\n        # get_value and set_value can be called on them, and\n        # animations like ChangeDecimalToValue can be called\n        # on them.\n        tex = Tex(\"x^2 + y^2 = 4.00\")\n        tex.next_to(axes, UP, buff=0.5)\n        value = tex.make_number_changable(\"4.00\")\n\n\n        # This will tie the right hand side of our equation to\n        # the square of the radius of the circle\n        value.add_updater(lambda v: v.set_value(circle.get_radius()**2))\n        self.add(tex)\n\n        text = Text(\"\"\"\n            You can manipulate numbers\n            in Tex mobjects\n        \"\"\", font_size=30)\n        text.next_to(tex, RIGHT, buff=1.5)\n        arrow = Arrow(text, tex)\n        self.add(text, arrow)\n\n        self.play(\n            circle.animate.set_height(2.0),\n            run_time=4,\n            rate_func=there_and_back,\n        )\n\n        # By default, tex.make_number_changable replaces the first occurance\n        # of the number,but by passing replace_all=True it replaces all and\n        # returns a group of the results\n        exponents = tex.make_number_changable(\"2\", replace_all=True)\n        self.play(\n            LaggedStartMap(\n                FlashAround, exponents,\n                lag_ratio=0.2, buff=0.1, color=RED\n            ),\n            exponents.animate.set_color(RED)\n        )\n\n        def func(x, y):\n            # Switch from manim coords to axes coords\n            xa, ya = axes.point_to_coords(np.array([x, y, 0]))\n            return xa**4 + ya**4 - 4\n\n        new_curve = ImplicitFunction(func)\n        new_curve.match_style(circle)\n        circle.rotate(angle_of_vector(new_curve.get_start()))  # Align\n        value.clear_updaters()\n\n        self.play(\n            *(ChangeDecimalToValue(exp, 4) for exp in exponents),\n            ReplacementTransform(circle.copy(), new_curve),\n            circle.animate.set_stroke(width=1, opacity=0.5),\n        )\n\n\nclass SurfaceExample(ThreeDScene):\n    def construct(self):\n        surface_text = Text(\"For 3d scenes, try using surfaces\")\n        surface_text.fix_in_frame()\n        surface_text.to_edge(UP)\n        self.add(surface_text)\n        self.wait(0.1)\n\n        torus1 = Torus(r1=1, r2=1)\n        torus2 = Torus(r1=3, r2=1)\n        sphere = Sphere(radius=3, resolution=torus1.resolution)\n        # You can texture a surface with up to two images, which will\n        # be interpreted as the side towards the light, and away from\n        # the light.  These can be either urls, or paths to a local file\n        # in whatever you've set as the image directory in\n        # the custom_config.yml file\n\n        # day_texture = \"EarthTextureMap\"\n        # night_texture = \"NightEarthTextureMap\"\n        day_texture = \"https://upload.wikimedia.org/wikipedia/commons/thumb/4/4d/Whole_world_-_land_and_oceans.jpg/1280px-Whole_world_-_land_and_oceans.jpg\"\n        night_texture = \"https://upload.wikimedia.org/wikipedia/commons/thumb/b/ba/The_earth_at_night.jpg/1280px-The_earth_at_night.jpg\"\n\n        surfaces = [\n            TexturedSurface(surface, day_texture, night_texture)\n            for surface in [sphere, torus1, torus2]\n        ]\n\n        for mob in surfaces:\n            mob.shift(IN)\n            mob.mesh = SurfaceMesh(mob)\n            mob.mesh.set_stroke(BLUE, 1, opacity=0.5)\n\n        surface = surfaces[0]\n\n        self.play(\n            FadeIn(surface),\n            ShowCreation(surface.mesh, lag_ratio=0.01, run_time=3),\n        )\n        for mob in surfaces:\n            mob.add(mob.mesh)\n        surface.save_state()\n        self.play(Rotate(surface, PI / 2), run_time=2)\n        for mob in surfaces[1:]:\n            mob.rotate(PI / 2)\n\n        self.play(\n            Transform(surface, surfaces[1]),\n            run_time=3\n        )\n\n        self.play(\n            Transform(surface, surfaces[2]),\n            # Move camera frame during the transition\n            self.frame.animate.increment_phi(-10 * DEGREES),\n            self.frame.animate.increment_theta(-20 * DEGREES),\n            run_time=3\n        )\n        # Add ambient rotation\n        self.frame.add_updater(lambda m, dt: m.increment_theta(-0.1 * dt))\n\n        # Play around with where the light is\n        light_text = Text(\"You can move around the light source\")\n        light_text.move_to(surface_text)\n        light_text.fix_in_frame()\n\n        self.play(FadeTransform(surface_text, light_text))\n        light = self.camera.light_source\n        self.add(light)\n        light.save_state()\n        self.play(light.animate.move_to(3 * IN), run_time=5)\n        self.play(light.animate.shift(10 * OUT), run_time=5)\n\n        drag_text = Text(\"Try moving the mouse while pressing d or f\")\n        drag_text.move_to(light_text)\n        drag_text.fix_in_frame()\n\n        self.play(FadeTransform(light_text, drag_text))\n        self.wait()\n\n\nclass InteractiveDevelopment(Scene):\n    def construct(self):\n        circle = Circle()\n        circle.set_fill(BLUE, opacity=0.5)\n        circle.set_stroke(BLUE_E, width=4)\n        square = Square()\n\n        self.play(ShowCreation(square))\n        self.wait()\n\n        # This opens an iPython terminal where you can keep writing\n        # lines as if they were part of this construct method.\n        # In particular, 'square', 'circle' and 'self' will all be\n        # part of the local namespace in that terminal.\n        self.embed()\n\n        # Try copying and pasting some of the lines below into\n        # the interactive shell\n        self.play(ReplacementTransform(square, circle))\n        self.wait()\n        self.play(circle.animate.stretch(4, 0))\n        self.play(Rotate(circle, 90 * DEGREES))\n        self.play(circle.animate.shift(2 * RIGHT).scale(0.25))\n\n        text = Text(\"\"\"\n            In general, using the interactive shell\n            is very helpful when developing new scenes\n        \"\"\")\n        self.play(Write(text))\n\n        # In the interactive shell, you can just type\n        # play, add, remove, clear, wait, save_state and restore,\n        # instead of self.play, self.add, self.remove, etc.\n\n        # To interact with the window, type touch().  You can then\n        # scroll in the window, or zoom by holding down 'z' while scrolling,\n        # and change camera perspective by holding down 'd' while moving\n        # the mouse.  Press 'r' to reset to the standard camera position.\n        # Press 'q' to stop interacting with the window and go back to\n        # typing new commands into the shell.\n\n        # In principle you can customize a scene to be responsive to\n        # mouse and keyboard interactions\n        always(circle.move_to, self.mouse_point)\n\n\nclass ControlsExample(Scene):\n    drag_to_pan = False\n\n    def setup(self):\n        self.textbox = Textbox()\n        self.checkbox = Checkbox()\n        self.color_picker = ColorSliders()\n        self.panel = ControlPanel(\n            Text(\"Text\", font_size=24), self.textbox, Line(),\n            Text(\"Show/Hide Text\", font_size=24), self.checkbox, Line(),\n            Text(\"Color of Text\", font_size=24), self.color_picker\n        )\n        self.add(self.panel)\n\n    def construct(self):\n        text = Text(\"text\", font_size=96)\n\n        def text_updater(old_text):\n            assert(isinstance(old_text, Text))\n            new_text = Text(self.textbox.get_value(), font_size=old_text.font_size)\n            # new_text.align_data_and_family(old_text)\n            new_text.move_to(old_text)\n            if self.checkbox.get_value():\n                new_text.set_fill(\n                    color=self.color_picker.get_picked_color(),\n                    opacity=self.color_picker.get_picked_opacity()\n                )\n            else:\n                new_text.set_opacity(0)\n            old_text.become(new_text)\n\n        text.add_updater(text_updater)\n\n        self.add(MotionMobject(text))\n\n        self.textbox.set_value(\"Manim\")\n        # self.wait(60)\n        # self.embed()\n\n\n# See https://github.com/3b1b/videos for many, many more\n","fixNo":"IL-M-2","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>example_scenes.py<\/span>, a module is imported using the wildcard symbol. This will import <a href='https://docs.python.org/3.8/reference/simple_stmts.html#import' target='_blank'>public name from this module<\/a> and can create conflicts in the local namespace. iCR suggested that wildcard imports should be avoided.","diffLocations":["example_scenes.py3880371707931472680.diff"]},{"fixerCustomHeading":"Refactor Redundant Method Call","isWarning":"True","functionName":"add_black_keys","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/svg/drawings.py","fixerCategoryTag":"PyFRMC-1","className":"Piano","priority":"M","scanDate":"Mon Jun 10 19:33:58 UTC 2024","fixerCustomMessageText":"In file: drawings.py, method: add_black_keys, a test expression has multiple calls of the same method. This is redundant and affects performance. On the other hand, if this is desired behavior in which multiple method calls with the same parameter returns different results, the logic should be reviewed to distinguish the method calls and make the code clean. iCR suggested that the method calls should be refactored and then the local variable should be used in the test expression.","fixerCategory":"Inappropriate Logic","selectedNode":"(bk.get_width() + self.key_buff) / bk.get_width()","fixNo":"IL-M-3","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>drawings.py<\/span>, method: <span class='function_name'>add_black_keys<\/span>, a test expression has multiple calls of the same method. This is redundant and affects performance. On the other hand, if this is desired behavior in which multiple method calls with the same parameter returns different results, the logic should be reviewed to distinguish the method calls and make the code clean. iCR suggested that the method calls should be refactored and then the local variable should be used in the test expression.","diffLocations":["drawings.py17330438207055407871.diff"]},{"fixerCustomHeading":"Refactor Redundant Method Call","isWarning":"True","functionName":"add_black_keys","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/svg/drawings.py","fixerCategoryTag":"PyFRMC-1","className":"Piano","priority":"M","scanDate":"Mon Jun 10 19:33:58 UTC 2024","fixerCustomMessageText":"In file: drawings.py, method: add_black_keys, a test expression has multiple calls of the same method. This is redundant and affects performance. On the other hand, if this is desired behavior in which multiple method calls with the same parameter returns different results, the logic should be reviewed to distinguish the method calls and make the code clean. iCR suggested that the method calls should be refactored and then the local variable should be used in the test expression.","fixerCategory":"Inappropriate Logic","selectedNode":"(bk.get_height() + self.key_buff) / bk.get_height()","fixNo":"IL-M-4","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>drawings.py<\/span>, method: <span class='function_name'>add_black_keys<\/span>, a test expression has multiple calls of the same method. This is redundant and affects performance. On the other hand, if this is desired behavior in which multiple method calls with the same parameter returns different results, the logic should be reviewed to distinguish the method calls and make the code clean. iCR suggested that the method calls should be refactored and then the local variable should be used in the test expression.","diffLocations":["drawings.py12352047479902430376.diff"]},{"fixerCustomHeading":"Refactor Redundant Method Call","isWarning":"True","functionName":"surround","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/geometry.py","fixerCategoryTag":"PyFRMC-1","className":"Circle","priority":"M","scanDate":"Mon Jun 10 19:34:10 UTC 2024","fixerCustomMessageText":"In file: geometry.py, method: surround, a test expression has multiple calls of the same method. This is redundant and affects performance. On the other hand, if this is desired behavior in which multiple method calls with the same parameter returns different results, the logic should be reviewed to distinguish the method calls and make the code clean. iCR suggested that the method calls should be refactored and then the local variable should be used in the test expression.","fixerCategory":"Inappropriate Logic","selectedNode":"(self.get_width() + 2 * buff) / self.get_width()","fixNo":"IL-M-5","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>geometry.py<\/span>, method: <span class='function_name'>surround<\/span>, a test expression has multiple calls of the same method. This is redundant and affects performance. On the other hand, if this is desired behavior in which multiple method calls with the same parameter returns different results, the logic should be reviewed to distinguish the method calls and make the code clean. iCR suggested that the method calls should be refactored and then the local variable should be used in the test expression.","diffLocations":["geometry.py14820244976065613733.diff"]},{"fixerCustomHeading":"Refactor Redundant Method Call","isWarning":"True","functionName":"surround","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/geometry.py","fixerCategoryTag":"PyFRMC-1","className":"Circle","priority":"M","scanDate":"Mon Jun 10 19:34:10 UTC 2024","fixerCustomMessageText":"In file: geometry.py, method: surround, a test expression has multiple calls of the same method. This is redundant and affects performance. On the other hand, if this is desired behavior in which multiple method calls with the same parameter returns different results, the logic should be reviewed to distinguish the method calls and make the code clean. iCR suggested that the method calls should be refactored and then the local variable should be used in the test expression.","fixerCategory":"Inappropriate Logic","selectedNode":"(self.get_height() + 2 * buff) / self.get_height()","fixNo":"IL-M-6","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>geometry.py<\/span>, method: <span class='function_name'>surround<\/span>, a test expression has multiple calls of the same method. This is redundant and affects performance. On the other hand, if this is desired behavior in which multiple method calls with the same parameter returns different results, the logic should be reviewed to distinguish the method calls and make the code clean. iCR suggested that the method calls should be refactored and then the local variable should be used in the test expression.","diffLocations":["geometry.py12620739129264577307.diff"]},{"fixerCustomHeading":"Refactor Redundant Method Call","isWarning":"True","functionName":"uv_func","projectPath":"/workspace/source","filePath":"/workspace/source/manimlib/mobject/three_dimensions.py","fixerCategoryTag":"PyFRMC-1","className":"Sphere","priority":"M","scanDate":"Mon Jun 10 19:34:12 UTC 2024","fixerCustomMessageText":"In file: three_dimensions.py, method: uv_func, a test expression has multiple calls of the same method. This is redundant and affects performance. On the other hand, if this is desired behavior in which multiple method calls with the same parameter returns different results, the logic should be reviewed to distinguish the method calls and make the code clean. iCR suggested that the method calls should be refactored and then the local variable should be used in the test expression.","fixerCategory":"Inappropriate Logic","selectedNode":"self.radius * np.array([\n            math.cos(u) * math.sin(v),\n            math.sin(u) * math.sin(v),\n            -math.cos(v)\n        ])","fixNo":"IL-M-7","relatedSourceLocations":null,"fixerCustomMessage":"In file: <span class='original_filename'>three_dimensions.py<\/span>, method: <span class='function_name'>uv_func<\/span>, a test expression has multiple calls of the same method. This is redundant and affects performance. On the other hand, if this is desired behavior in which multiple method calls with the same parameter returns different results, the logic should be reviewed to distinguish the method calls and make the code clean. iCR suggested that the method calls should be refactored and then the local variable should be used in the test expression.","diffLocations":["three_dimensions.py5754469545058133575.diff"]}]